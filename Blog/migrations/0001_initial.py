# Generated by Django 4.2.11 on 2024-03-28 12:16

import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('BlogId', models.IntegerField(primary_key=True, serialize=False)),
                ('Title', models.CharField(max_length=50)),
                ('DatePosted', models.DateTimeField()),
                ('Likes', models.IntegerField()),
                ('Comments', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('CategoryId', models.IntegerField(primary_key=True, serialize=False)),
                ('CategoryName', models.CharField(max_length=50)),
                ('Description', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('CommunityId', models.IntegerField(primary_key=True, serialize=False)),
                ('CommunityName', models.CharField(max_length=50)),
                ('Description', models.CharField(max_length=500)),
                ('NumberOfMembers', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('UserId', models.BigAutoField(primary_key=True, serialize=False)),
                ('password', models.CharField(default='', max_length=128)),
                ('username', models.CharField(default='', max_length=128)),
                ('groups', models.ManyToManyField(related_name='blog_users', to='auth.group')),
                ('user_permissions', models.ManyToManyField(related_name='blog_users', to='auth.permission')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserCommunity',
            fields=[
                ('JoinId', models.IntegerField(primary_key=True, serialize=False)),
                ('CommunityID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Blog.community')),
                ('UserID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Blog.user')),
            ],
        ),
        migrations.CreateModel(
            name='Reader',
            fields=[
                ('ReaderId', models.IntegerField(primary_key=True, serialize=False)),
                ('Interest', models.CharField(max_length=1000)),
                ('UserID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Blog.user')),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('LikeId', models.IntegerField(primary_key=True, serialize=False)),
                ('DateLiked', models.DateTimeField()),
                ('BlogID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Blog.blogpost')),
                ('UserID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Blog.user')),
            ],
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('HistoryId', models.IntegerField(primary_key=True, serialize=False)),
                ('History', models.CharField(max_length=500)),
                ('UserID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Blog.user')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('CommentId', models.IntegerField(primary_key=True, serialize=False)),
                ('DatePosted', models.DateTimeField()),
                ('Content', models.CharField(max_length=50)),
                ('BlogID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Blog.blogpost')),
                ('UserID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Blog.user')),
            ],
        ),
        migrations.AddField(
            model_name='blogpost',
            name='CategoryId',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Blog.category'),
        ),
        migrations.AddField(
            model_name='blogpost',
            name='UserID',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Blog.user'),
        ),
        migrations.CreateModel(
            name='Blogger',
            fields=[
                ('BloggerId', models.IntegerField(primary_key=True, serialize=False)),
                ('Bio', models.CharField(max_length=1000)),
                ('UserID', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Blog.user')),
            ],
        ),
    ]
